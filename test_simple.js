const puppeteer = require('puppeteer');

async function testRatingSystem() {
  console.log('üß™ Test simple du syst√®me d\'√©valuations\n');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: { width: 1280, height: 720 }
  });
  
  const page = await browser.newPage();
  
  try {
    // Test 1: V√©rifier que le frontend d√©marre
    console.log('üîç Test: Chargement du frontend React...');
    await page.goto('http://localhost:3001', { waitUntil: 'networkidle0', timeout: 10000 });
    console.log('‚úÖ Frontend accessible\n');
    
    // Test 2: Aller sur une page de produit
    console.log('üîç Test: Navigation vers page produit...');
    await page.goto('http://localhost:3001/products/1', { waitUntil: 'networkidle0', timeout: 10000 });
    console.log('‚úÖ Page produit accessible\n');
    
    // Test 3: V√©rifier la pr√©sence de composants d'√©valuation
    console.log('üîç Test: Recherche des composants d\'√©valuation...');
    
    // Attendre un peu que les composants se chargent
    await page.waitForTimeout(2000);
    
    // Prendre une capture d'√©cran pour diagnostique
    await page.screenshot({ path: 'test-screenshot.png', fullPage: true });
    console.log('üì∑ Capture d\'√©cran sauv√©e: test-screenshot.png');
    
    // Chercher diff√©rents s√©lecteurs possibles
    const selectors = [
      'section:contains("√©valuation")',
      'div:contains("avis")', 
      'button:contains("Laisser")',
      '.rating-section',
      '[data-testid="rating"]',
      '.star-rating',
      'svg[viewBox="0 0 20 20"]' // √©toiles SVG
    ];
    
    let foundComponents = 0;
    for (const selector of selectors) {
      try {
        const elements = await page.$$(selector);
        if (elements.length > 0) {
          console.log(`‚úÖ Trouv√© ${elements.length} √©l√©ment(s) pour: ${selector}`);
          foundComponents++;
        }
      } catch (error) {
        // S√©lecteur non support√©, on continue
      }
    }
    
    if (foundComponents > 0) {
      console.log(`\nüéâ ${foundComponents} type(s) de composants d'√©valuation d√©tect√©s !`);
    } else {
      console.log('\n‚ö†Ô∏è  Aucun composant d\'√©valuation d√©tect√© sur la page');
    }
    
    // Test 4: V√©rifier le code source pour les imports
    console.log('\nüîç Test: Analyse du code source...');
    const content = await page.content();
    
    const checks = [
      { name: 'Import React', pattern: /react/i },
      { name: 'Composant Rating', pattern: /rating/i },
      { name: '√âtoiles', pattern: /star|√©toile/i },
      { name: '√âvaluation', pattern: /√©valuation|avis/i }
    ];
    
    checks.forEach(check => {
      if (check.pattern.test(content)) {
        console.log(`‚úÖ ${check.name} d√©tect√© dans le code`);
      } else {
        console.log(`‚ùå ${check.name} non trouv√©`);
      }
    });
    
    console.log('\n‚úÖ Tests termin√©s avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur durant les tests:', error.message);
  } finally {
    await browser.close();
  }
}

testRatingSystem().catch(console.error);