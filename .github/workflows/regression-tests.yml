name: Tests de R√©gression

on:
  pull_request:
    branches: [ master, main ]
  push:
    branches: [ master, main ]
  workflow_dispatch: # Permet d'ex√©cuter manuellement

env:
  NODE_ENV: test
  CI: true

jobs:
  regression-tests:
    name: Tests E2E et Analyse de R√©gression
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: tchopmygrinds_test
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: tchopmygrinds_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: üì¶ Checkout du code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: üîß Installation des d√©pendances
      run: |
        npm ci
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: üíé Setup Ruby pour Rails
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true

    - name: üóÑÔ∏è Configuration de la base de donn√©es
      env:
        DATABASE_URL: postgresql://tchopmygrinds_test:testpassword@localhost:5432/tchopmygrinds_test
        RAILS_ENV: test
      run: |
        bundle exec rails db:create
        bundle exec rails db:migrate
        bundle exec rails db:seed

    - name: üèóÔ∏è Build du frontend
      run: |
        npm run build:css
        npm run build:react

    - name: üöÄ D√©marrage des serveurs (background)
      env:
        DATABASE_URL: postgresql://tchopmygrinds_test:testpassword@localhost:5432/tchopmygrinds_test
        RAILS_ENV: test
      run: |
        # D√©marrer Rails en arri√®re-plan
        bundle exec rails server -p 3000 -e test &
        RAILS_PID=$!
        echo "RAILS_PID=$RAILS_PID" >> $GITHUB_ENV
        
        # D√©marrer le serveur frontend en arri√®re-plan  
        npm run preview -- --port 3001 &
        FRONTEND_PID=$!
        echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
        
        # Attendre que les serveurs d√©marrent
        sleep 30
        
        # V√©rifier que les serveurs r√©pondent
        curl -f http://localhost:3000/api/v1/commerces || exit 1
        curl -f http://localhost:3001 || exit 1

    - name: üß™ Ex√©cution des tests de r√©gression
      id: tests
      run: |
        npm run test:ci
      continue-on-error: true

    - name: üìä Upload des artefacts de test
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-artifacts
        path: |
          test-artifacts/
          tests/reports/
          tests/screenshots/
        retention-days: 30

    - name: üìù Commentaire PR avec les r√©sultats
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './test-artifacts/pr-report.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }

    - name: üîç V√©rification des r√©gressions critiques
      if: always()
      run: |
        if [ -f "test-artifacts/ci-summary.json" ]; then
          RECOMMENDATION=$(cat test-artifacts/ci-summary.json | jq -r '.recommendation')
          echo "Recommandation: $RECOMMENDATION"
          
          if [ "$RECOMMENDATION" = "BLOCK" ]; then
            echo "üö® D√âPLOIEMENT BLOQU√â - R√©gressions critiques d√©tect√©es"
            exit 1
          elif [ "$RECOMMENDATION" = "CAUTION" ]; then
            echo "‚ö†Ô∏è D√âPLOIEMENT AVEC PRUDENCE - R√©gressions mineures d√©tect√©es"
            # Ne pas √©chouer, mais avertir
          else
            echo "‚úÖ D√âPLOIEMENT AUTORIS√â - Aucune r√©gression critique"
          fi
        else
          echo "‚ùå Impossible de lire le rapport de tests"
          exit 1
        fi

    - name: üßπ Nettoyage
      if: always()
      run: |
        # Arr√™ter les serveurs
        if [ ! -z "$RAILS_PID" ]; then
          kill $RAILS_PID || true
        fi
        if [ ! -z "$FRONTEND_PID" ]; then
          kill $FRONTEND_PID || true
        fi