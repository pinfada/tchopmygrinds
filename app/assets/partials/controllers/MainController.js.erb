(function() {
    'use strict';
    var module = angular.module('marketApp');


module.controller('MainController', [
    '$q', 
    '$scope',
    '$compile',
    '$window',
    '$uibModal',
    '$log',
    '$http',
    'nemSimpleLogger',
    'leafletData',
    'coordinates', 
    '$geolocation',
    'myPosition',
    'myCoordinates', 
    'myMarkers', 
    'boutiques',
    'myBoutiques',
    'myCommercenear',
    'SearchCommerce',
    'GetAllCommerce',
    '$route',
    '$routeParams',
    'Auth',
    'ngCart',
    'GetUserCommerces',
    'GetUserAddresses',
    'GetAllUser',
    function($q, $scope, $compile, $window,  $uibModal, $log, $http, nemSimpleLogger, leafletData, coordinates, $geolocation, myPosition, myCoordinates, myMarkers, boutiques, myBoutiques, myCommercenear, SearchCommerce, GetAllCommerce, $route, $routeParams, Auth, ngCart, GetUserCommerces, GetUserAddresses, GetAllUser) {

        ngCart.setTaxRate(7.5);
        ngCart.setShipping(2.99);
        var deferred = $q.defer();

        // ===================================
        // NOUVELLES FONCTIONNALITÉS RECHERCHE PRODUITS
        // ===================================
        
        // Variables pour la recherche de produits
        $scope.searchQuery = '';
        $scope.searchRadius = 25; // Rayon par défaut en km
        $scope.searchResults = [];
        $scope.noResults = false;
        $scope.isSearching = false;
        $scope.viewMode = 'list'; // 'list' ou 'map'
        $scope.userPosition = null;
        
        // Toasts simples en mémoire
        $scope.successToasts = [];
        $scope.errorToasts = [];
        $scope.infoToasts = [];

        $scope.pushToast = function(type, message, ttlMs) {
            var bucket = type === 'success' ? $scope.successToasts : type === 'error' ? $scope.errorToasts : $scope.infoToasts;
            bucket.push(message);
            setTimeout(function(){
                $scope.$applyAsync(function(){
                    bucket.shift();
                });
            }, ttlMs || 3000);
        };

        // Produits populaires pour suggestions
        $scope.popularProducts = [
            'banane plantain', 'tomate', 'pain', 'mangue', 
            'riz', 'poisson', 'igname', 'avocat', 'ananas'
        ];

        // Définir le rayon de recherche
        $scope.setSearchRadius = function(radius) {
            $scope.searchRadius = radius;
            // Relancer la recherche si une requête est active
            if ($scope.searchQuery) {
                $scope.searchProductNearby();
            }
        };

        // Fonction principale de recherche de produits géolocalisés
        $scope.searchProductNearby = function() {
            if (!$scope.searchQuery) return;
            
            $scope.isSearching = true;
            $scope.noResults = false;
            $scope.searchResults = [];
            
            // Obtenir la position de l'utilisateur
            coordinates.getCoordinates().then(function(position) {
                $scope.userPosition = position;
                
                // Appeler l'API de recherche de produits
                var searchParams = {
                    name_query: $scope.searchQuery,
                    lat_query: position.lat,
                    lng_query: position.lng,
                    radius: $scope.searchRadius
                };
                
                $http({
                    method: 'GET',
                    url: '/products/listcommerce',
                    params: searchParams
                }).then(function(response) {
                    $scope.isSearching = false;
                    
                    if (response.data && response.data.length > 0) {
                        // Traiter les résultats
                        $scope.searchResults = response.data.map(function(item) {
                            return {
                                commerceName: item.name,
                                commerceType: item.commerceType || 'sedentary', // À déterminer selon les données
                                ville: item.ville || 'Non spécifiée',
                                distance: item.distance,
                                prix: item.prix,
                                stock: item.stock,
                                latitude: item.latitude,
                                longitude: item.longitude,
                                productName: $scope.searchQuery,
                                commerceId: item.commerceId,
                                productId: item.productId
                            };
                        });
                        
                        $scope.viewMode = 'list'; // Afficher la liste par défaut
                        $scope.updateMapWithResults();
                        
                    } else {
                        $scope.noResults = true;
                    }
                    
                }).catch(function(error) {
                    $scope.isSearching = false;
                    console.error('Erreur recherche produits:', error);
                    $scope.pushToast('error', "Erreur lors de la recherche des produits");
                    // Fallback : rechercher dans tous les produits
                    $scope.searchAllProducts();
                });
                
            }).catch(function(error) {
                $scope.isSearching = false;
                console.error('Erreur géolocalisation:', error);
                alert('Impossible de vous géolocaliser. Veuillez autoriser la géolocalisation.');
            });
        };

        // Recherche alternative dans tous les produits si l'API spécialisée échoue
        $scope.searchAllProducts = function() {
            $http.get('/products').then(function(response) {
                var allProducts = response.data;
                var matchingProducts = allProducts.filter(function(product) {
                    return product.nom && 
                           product.nom.toLowerCase().includes($scope.searchQuery.toLowerCase()) &&
                           product.unitsinstock > 0;
                });
                
                if (matchingProducts.length > 0) {
                    // Récupérer les commerces pour chaque produit
                    $scope.getCommercesForProducts(matchingProducts);
                } else {
                    $scope.noResults = true;
                }
            });
        };

        // Récupérer les commerces associés aux produits trouvés
        $scope.getCommercesForProducts = function(products) {
            var promises = [];
            
            products.forEach(function(product) {
                var promise = $http.get('/commerces').then(function(response) {
                    return {
                        product: product,
                        commerces: response.data
                    };
                });
                promises.push(promise);
            });
            
            $q.all(promises).then(function(results) {
                var searchResults = [];
                
                results.forEach(function(result) {
                    result.commerces.forEach(function(commerce) {
                        if (commerce.latitude && commerce.longitude && $scope.userPosition) {
                            var distance = $scope.calculateDistance(
                                $scope.userPosition.lat, $scope.userPosition.lng,
                                commerce.latitude, commerce.longitude
                            );
                            
                            if (distance <= $scope.searchRadius) {
                                searchResults.push({
                                    commerceName: commerce.nom,
                                    commerceType: commerce.user?.statut_type || 'sedentary',
                                    ville: commerce.ville,
                                    distance: distance,
                                    prix: result.product.unitprice,
                                    stock: result.product.unitsinstock,
                                    latitude: commerce.latitude,
                                    longitude: commerce.longitude,
                                    productName: result.product.nom,
                                    commerceId: commerce.id,
                                    productId: result.product.id
                                });
                            }
                        }
                    });
                });
                
                if (searchResults.length > 0) {
                    $scope.searchResults = searchResults.sort(function(a, b) {
                        return a.distance - b.distance;
                    });
                    $scope.updateMapWithResults();
                } else {
                    $scope.noResults = true;
                }
            });
        };

        // Calculer la distance entre deux points (formule haversine)
        $scope.calculateDistance = function(lat1, lng1, lat2, lng2) {
            var R = 6371; // Rayon de la Terre en km
            var dLat = (lat2 - lat1) * Math.PI / 180;
            var dLng = (lng2 - lng1) * Math.PI / 180;
            var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                    Math.sin(dLng/2) * Math.sin(dLng/2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        };

        // Mettre à jour la carte avec les résultats de recherche
        $scope.updateMapWithResults = function() {
            // Cette fonction sera implémentée pour afficher les marqueurs des résultats
            console.log('Mise à jour carte avec', $scope.searchResults.length, 'résultats');
        };

        // Ajouter un produit au panier depuis les résultats de recherche
        $scope.addToCartFromSearch = function(result) {
            if (result.stock > 0) {
                ngCart.addItem(
                    result.productId,
                    result.productName,
                    result.prix,
                    1,
                    {
                        commerceName: result.commerceName,
                        distance: result.distance
                    }
                );
                
                // Feedback visuel
                $scope.pushToast('success', 'Produit ajouté au panier !');
            }
        };

        // Système de manifestation d'intérêt
        $scope.showInterestModal = function() {
            if (!Auth.isAuthenticated()) {
                $scope.pushToast('info', 'Veuillez vous connecter pour manifester votre intérêt.');
                return;
            }
            
            $uibModal.open({
                template: `
                    <div class="modal-header">
                        <h4 class="modal-title">Manifester mon intérêt</h4>
                        <button type="button" class="close" aria-label="Fermer" ng-click="$dismiss()">
                          <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Vous souhaitez être notifié quand "<strong>{{searchQuery}}</strong>" sera disponible dans votre zone ?</p>
                        <p><small class="text-muted">Nous vous enverrons un email dès qu'un vendeur proposera ce produit dans un rayon de {{searchRadius}}km.</small></p>
                        <div class="form-group">
                            <label>Message pour les vendeurs (optionnel) :</label>
                            <textarea ng-model="interestMessage" class="form-control" rows="3" 
                                      placeholder="Ex: Je cherche des bananes plantains bien mûres..."></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline-secondary" ng-click="$dismiss()">Annuler</button>
                        <button class="btn btn-primary" ng-click="submitInterest()">
                            <i class="fa fa-bell"></i> Manifester mon intérêt
                        </button>
                    </div>
                `,
                controller: ['$scope', '$uibModalInstance', function($modalScope, $modalInstance) {
                    $modalScope.searchQuery = $scope.searchQuery;
                    $modalScope.searchRadius = $scope.searchRadius;
                    $modalScope.interestMessage = '';
                    
                    $modalScope.submitInterest = function() {
                        $scope.saveProductInterest($modalScope.interestMessage);
                        $modalInstance.close();
                    };
                }],
                size: 'md',
                backdrop: 'static',
                keyboard: true,
                windowClass: 'modal tm-modal'
            });
        };

        // Sauvegarder la manifestation d'intérêt
        $scope.saveProductInterest = function(message) {
            if (!$scope.userPosition) {
                $scope.pushToast('error', 'Position utilisateur non disponible.');
                return;
            }
            
            var interestData = {
                product_interest: {
                    product_name: $scope.searchQuery,
                    user_latitude: $scope.userPosition.lat,
                    user_longitude: $scope.userPosition.lng,
                    search_radius: $scope.searchRadius,
                    message: message
                }
            };
            
            $http.post('/product_interests', interestData)
                .then(function(response) {
                    if (response.data.success) {
                        $scope.showSuccessMessage(response.data.message);
                    } else {
                        $scope.pushToast('error', 'Erreur: ' + response.data.errors.join(', '));
                    }
                })
                .catch(function(error) {
                    console.error('Erreur sauvegarde intérêt:', error);
                    $scope.pushToast('error', 'Erreur lors de l\'enregistrement.');
                });
        };

        // Alerter quand le produit sera disponible
        $scope.notifyWhenAvailable = function(result) {
            if (!Auth.isAuthenticated()) {
                $scope.pushToast('info', 'Veuillez vous connecter pour activer les alertes.');
                return;
            }
            
            // Enregistrer l'alerte
            Auth.currentUser().then(function(user) {
                var alertData = {
                    user_id: user.id,
                    commerce_id: result.commerceId,
                    product_id: result.productId,
                    product_name: result.productName,
                    commerce_name: result.commerceName
                };
                
                var alerts = JSON.parse(localStorage.getItem('stockAlerts') || '[]');
                alerts.push(alertData);
                localStorage.setItem('stockAlerts', JSON.stringify(alerts));
                
                $scope.showSuccessMessage('Vous serez alerté quand ce produit sera à nouveau disponible chez ' + result.commerceName);
            });
        };

        // Afficher un message de succès
        $scope.showSuccessMessage = function(message) {
            // Simple implementation avec une div temporaire
            var alertDiv = angular.element('<div class="alert alert-success" style="position: fixed; top: 20px; right: 20px; z-index: 9999;">' + message + '</div>');
            angular.element('body').append(alertDiv);
            
            setTimeout(function() {
                alertDiv.fadeOut(500, function() {
                    alertDiv.remove();
                });
            }, 3000);
        };
    
        //map = L.mapquest.map('map', {
        //    center: [47.4550213, -0.5370654],
        //    layers: [tileLayer],
        //    zoom: 12
        //});
        var watchposOptions = {
            timeout: 6000,
            maximumAge: 250, //Accept a cached position whose age is no greater than the specified time in milliseconds
            enableHighAccuracy: true
        };

        myPosition.getPosition({watchposOptions})
        //console.log("myPosition : ", myPosition)

        $scope.$on("geolocationStateChanged", function(evt, data) {
            if (data) {
                console.log("latitude  : ", data.latitude)
                console.log("longitude : ", data.longitude)
            } else {
                console.log("KO : ", data)
            }
        })
        
        //var myPosition = {}
        //var myPosition = $geolocation.position.coords

        //console.log("type of data: "+typeof(myPosition));
        //console.log("myPosition : ", myPosition)
        //for(var key in myPosition) {
        //   if(myPosition.hasOwnProperty(key)) {
        //        console.log(key, myPosition[key])
        //        //do something with value;
        //    }
        //}
        //console.log("coords : ", myPosition.coords)
        //$scope.$watch('myPosition.coords', function (newValue, oldValue) {
        //    console.log("new position value : ", newValue)
        //    console.log("old position value : ", oldValue)
            //$scope.map = {
            //  center: {
            //    latitude: newValue.latitude,
            //    longitude: newValue.longitude
            //  },
            //  zoom: 16
            //};                      
        //}, true);

        coordinates.getCoordinates().then(function (resultcoord) {
            var map = null;
            // MapQuest supprimé: on utilise Leaflet + OpenStreetMap
            var mapquest_key = null;
    
            //nemSimpleLogger.doLog = true; //default is true 
            //nemSimpleLogger.currentLevel = nemSimpleLogger.LEVELS.debug;//defaults to error only 
    
            map = L.map('map', {
                center: [resultcoord.lat, resultcoord.lng],
                zoom: 14
            });
            var tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);

            // Affichage des commerces à proximité si l'utilisateur s'est authentifié
            if (Auth.isAuthenticated() )
            {
                Auth.currentUser().then(function(user) {
                    //--------------------------------------------------*
                    //          S E L L E R   B L O C                   *
                    //--------------------------------------------------*
                    // Si l'utilisateur a un role de vendeur on vérifie si :
                    // C'est un vendeur du type 
                    //    - sedentaire : Vérification de la présence des commerces
                    //    - itinérant  : 
                    if (user.seller_role == true){
                        //console.log("seller : ", user)
                        //vérification de la présence de commerces en base pour l'utilisateur connecté
                        GetUserCommerces.get({userId: user.id}).then(function(result){
                            // Si le vendeur sedentaire ne possède pas de commerce
                            var nb_commerce = result.length
                            if (nb_commerce == 0){
                                if (user.statut_type == "sedentary"){
                                    //Transmission des coordonnées géo de l'utilisateur pour affichage liste de commerces à proximité
                                    //La liste des commerces à proximité est issue d'une extraction des données Mapquest
                                    //boutiques.getBoutiques([resultcoord.lat, resultcoord.lng]).then(function (boutique) {
                                    $uibModal.open({
                                        templateUrl: "<%= asset_path('Templates/myModalBoutiqueSedentaire.html') %>", // loads the template
                                        controller: 'modalBoutiqueSedentaire',
                                        backdrop: true,
                                        size: 'md',
                                        windowClass: 'modal',
                                        resolve: {
                                            usercoord: function () {
                                                return resultcoord; 
                                            },
                                            user: function () {
                                                return user; 
                                            }
                                        }
                                    })
                                    //})
                                }
                                else {

                                    $uibModal.open({
                                        templateUrl: "<%= asset_path('Templates/myModalBoutiqueItinerant.html') %>", // loads the template
                                        controller: 'modalBoutiqueItinerant',
                                        backdrop: true,
                                        size: 'md',
                                        windowClass: 'modal',
                                        resolve: {
                                            usercoord: function () {
                                                return resultcoord; 
                                            },
                                            user: function () {
                                                return user; 
                                            }
                                        }
                                    })

                                }
                            } else {
                                // L'objectif est de donnée la possibilité au vendeur de communiquer avec les prospects à proximité de son point de vente
                                // Pour cela, il faut :
                                //  - Récupérer la liste des clients stockées et l'Afficher au niveau de la map
                                //  - Mettre en place un bouton contact client (messagerie) [Inactif]
                                GetAllUser.query().then(function (userdata) {
                                    angular.forEach(userdata, function(user, key) {
                                        // Si le client est un acheteur on récupère ses coordonnées
                                        //console.log("user info : ", user)
                                        var userid = user.id
                                        if (user.buyerRole == true) {
                                            // récuperation des adresses des clients et affichage sur la map
                                            GetUserAddresses.get({userId: userid}).then(function (addresses) {
                                                angular.forEach(addresses, function (address) {
                                                    var latitude = address.latitude;
                                                    var longitude = address.longitude;
                                                    //console.log("adresse buyer : ", address)

                                                    //Customisation des Icons utiliser pour la map
                                                    //customIcon = L.mapquest.icons.marker({
                                                    //    primaryColor: '#22407F',
                                                    //    secondaryColor: '#3B5998',
                                                    //    shadow: true,
                                                    //    size: 'md'
                                                    //    symbol: 'A'
                                                    //});

                                                    // Customisation de l'Icon pour les commerces déjà presents en base
                                                    customIcon = L.icon({
                                                        iconUrl: "<%= image_url('buyer.png') %>",
                                                        iconSize: [25, 25], // size of the icon
                                                        });
                                                    commentaire = "<div>Send message to the customer <br /><button class='btn' ng-click='btncustomer"+ address.id +"()'>Cliquez ici</button></div>";

                                                    // Compile title DOM into a link function
                                                    var linkFn = $compile(angular.element(commentaire));
                                                    
                                                    // Return a jQuery DOM tree fully controlled by AngularJS so that ng directives will work
                                                    var popup = linkFn($scope);
                                                    var customPopup = L.popup()
                                                        .setLatLng([latitude, longitude])
                                                        .setContent(popup[0])
                                                        .openOn(map);

                                                    L.marker([latitude, longitude], {icon: customIcon}).bindPopup(customPopup).addTo(map);
                                                })

                                            }, function (error) {
                                                // do something about the error
                                                console.log("Error GetAllAddress : ",error.statusText);
                                                deferred.reject(error);
                                            });
                                        }
                                    })
                                }, function (error) {
                                    // do something about the error
                                    console.log("Error GetAllUser : ",error.statusText);
                                    deferred.reject(error);
                                });

                                // boucle sur l'ensemble des commerces de l'utilisateur et affichage sur la map
                                for(var i=0; i<nb_commerce; i++) {
                                    //console.log("commerces : ", result[i])

                                    var boutique_place = "";
                                    var customIcon = "";
                                    var commentaire = "";

                                    boutique_place = [result[i].latitude, result[i].longitude];
                                    //boutique_place.push(result[i].latitude, result[i].longitude);
                                    var btnproduct = 'btnproduct'+result[i].id;
                                    var commerce_id = result[i].id;

                                    $scope[btnproduct] = function (id) {
                                        $uibModal.open({
                                            templateUrl: "<%= asset_path('Templates/myModalProduct.html') %>", // loads the template
                                            controller: "modalProduct",
                                            backdrop: "static", // setting backdrop allows us to close the modal window on clicking outside the modal window
                                            size: 'lg',
                                            windowClass: "hmodal-info",
                                            resolve: {
                                                commerce: function () {
                                                    return id; // Appel au controlleur modalProduct avec en entrée le nom du commerce
                                                },
                                                user: function () {
                                                    return user; 
                                                }
                                            }
                                        });
                                    };
                                    
                                    // Customisation des Icons utiliser pour la map
                                    // Icône personnalisée Leaflet (MapQuest supprimé)
                                    customIcon = L.icon({
                                        iconUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ2VarF6jyBEEqUI5d0ZK1NMm69I1rngTAM1KEQHvH_5CW73v-g',
                                        iconSize: [35, 35]
                                    });

                                    // Customisation de l'Icon pour les commerces déjà presents en base
                                    customIcon = L.icon({
                                        iconUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ2VarF6jyBEEqUI5d0ZK1NMm69I1rngTAM1KEQHvH_5CW73v-g',
                                        iconSize: [35, 35], // size of the icon
                                        });
                                    commentaire = "<div><b>D&eacuteja adh&eacuterent</b>.<br /> Pour ajouter vos produits <br /><button class='btn' ng-click='btnproduct"+ commerce_id +"("+commerce_id+")'>Cliquez ici</button></div>";

                                    // Compile title DOM into a link function
                                    var linkFn = $compile(angular.element(commentaire));
                                    
                                    // Return a jQuery DOM tree fully controlled by AngularJS so that ng directives will work
                                    var popup = linkFn($scope);

                                    //console.log("coordonnées :", boutique_place )
                                    if (boutique_place !== " ") {
                                    //if (boutique_place.length > 0) {
                                        var customPopup = L.popup()
                                            .setLatLng(boutique_place)
                                            .setContent(popup[0])
                                            .openOn(map);
                                        //map.removeLayer(result);
                                        L.marker(boutique_place, {icon: customIcon}).bindPopup(customPopup).addTo(map);
                                    }
                                }
                            }

                            deferred.resolve($scope.commerces);
                        }, function (error) {
                            // do something about the error
                            console.log("Error Log",error.statusText);
                            deferred.reject(error);
                        });
                        var p = deferred.promise;

                    } else {
                    //--------------------------------------------------*
                    //            B U Y E R   B L O C                   *
                    //--------------------------------------------------*
                        // L'utilisateur a un rôle d'acheteur
                        // Vérification en base de la présence de commerces à proximité en fonction des coordonnées géo
                        myCommercenear.Getcommercenear(resultcoord.lat, resultcoord.lng).then(function (commerces) {
                            //var result = angular.equals({}, commerces);
                            // Si on ne trouve aucun commerce en base, extraction des données Mapquest
                            angular.forEach(commerces, function (commerce) {
                                //console.log("MainController --> commerces : ", commerces)
                                //console.log("MainController --> commerce length : ", commerce.length)
                                let nb_commerce = commerce.length;
                                if (nb_commerce === 0) {
                                    var list_commerce = 15
                                    //console.log("pas de boutiques enregistrées à proximité de chez vous")
                                    //console.log("MainController --> list_commerce : ", list_commerce)
                                    //console.log("MainController --> mapquest_key : ", mapquest_key)
                                    //$window.alert("Pas de boutiques enregistrées à proximité de chez vous");
                                    myBoutiques.getBoutiques([resultcoord.lat, resultcoord.lng], list_commerce, mapquest_key).then(function (boutique) {
                                        var boutiques = boutique.searchResults
                                        angular.forEach(boutiques, function (boutique) {
                                            //console.log("getBoutiques --> boutique : ", boutique)
                                            var coord = boutique.shapePoints
                                            //console.log("getBoutiques --> coord : ", coord)
                                            var boutique_id = boutique.resultNumber
                                            var latitude = coord[0];
                                            var longitude = coord[1];
    
                                            // Customisation de l'Icon pour les commerces déjà presents en base
                                            var customIcon = L.icon({
                                                iconUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ2VarF6jyBEEqUI5d0ZK1NMm69I1rngTAM1KEQHvH_5CW73v-g',
                                                iconSize: [35, 35], // size of the icon
                                                });
                                            var commentaire = "<div><b ng-click='btnseller"+ boutique_id +"()'>"+boutique.name+"</b> is not yet register on Tchopmygrinds."+
                                                              "<br /> You can tell them to join the adventure below"+
                                                              "<br /><span class='glyphicon glyphicon-phone'> : "+boutique.fields.phone+"</span>"+
                                                              "<br /><span class='glyphicon glyphicon-envelope'> : </span></div>";
                                            // Compile title DOM into a link function
                                            var linkFn = $compile(angular.element(commentaire));
                                            
                                            // Return a jQuery DOM tree fully controlled by AngularJS so that ng directives will work
                                            var popup = linkFn($scope);
                                            var customPopup = L.popup()
                                                .setLatLng([latitude, longitude])
                                                .setContent(popup[0])
                                                .openOn(map);
    
                                            L.marker([latitude, longitude], {icon: customIcon}).bindPopup(customPopup).addTo(map);
                                        })
    
                                    }, function (error) {
                                        // do something about the error
                                        console.log("Error getBoutiques : ", error);
                                        deferred.reject(error);
                                    });
    
                                } else {
                                    var list_commerce = 15
                                    myBoutiques.getBoutiques([resultcoord.lat, resultcoord.lng], list_commerce, mapquest_key).then(function (data) {
                                        var boutiques = data.searchResults
                                        angular.forEach(boutiques, function (data) {
                                            //console.log("getBoutiques --> boutique : ", boutique)
                                            var coord = data.shapePoints
                                            //console.log("getBoutiques --> coord : ", coord)
                                            var boutique_id = data.resultNumber
                                            var latitude = coord[0];
                                            var longitude = coord[1];
                                            
                                            myMarkers.getMarkers(data).then(function (markers) {
                                                if (markers.dataReturned === false) {
                                                    //console.log("MainController : ", data.name)
                                                    // Customisation de l'Icon pour les commerces déjà presents en base
                                                    var customIcon = L.icon({
                                                        iconUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ2VarF6jyBEEqUI5d0ZK1NMm69I1rngTAM1KEQHvH_5CW73v-g',
                                                        iconSize: [35, 35], // size of the icon
                                                        });
                                                    var commentaire = "<div><b ng-click='btnseller"+ boutique_id +"()'>"+data.name+"</b> is not yet register on Tchopmygrinds."+
                                                                    "<br /> You can tell them to join the adventure below"+
                                                                    "<br /><span class='glyphicon glyphicon-phone'> : <a href=tel:"+data.fields.phone+"></a>"+data.fields.phone+"</span>"+
                                                                    "<br /><span class='glyphicon glyphicon-envelope'> : </span></div>";
                                                    // Compile title DOM into a link function
                                                    var linkFn = $compile(angular.element(commentaire));
                                                    
                                                    // Return a jQuery DOM tree fully controlled by AngularJS so that ng directives will work
                                                    var popup = linkFn($scope);
                                                    var customPopup = L.popup()
                                                        .setLatLng([latitude, longitude])
                                                        .setContent(popup[0])
                                                        .openOn(map);
            
                                                    L.marker([latitude, longitude], {icon: customIcon}).bindPopup(customPopup).addTo(map);
                                                } else {
                                                    // Affichage des magasins présents en base
                                                    angular.forEach(commerces, function(boutique) {
                                                        //console.log("boutique trouvée : ", boutique)
                                                        // boucle sur l'ensemble des commerces de l'utilisateur et affichage sur la map
                                                        for(var i=0; i<nb_commerce; i++) {
                                                            //boutique_place = [boutique[i].latitude, boutique[i].longitude]
                                                            //console.log("boutique test : ", boutique)
                                                                
                                                            var commentaire = "";
                                                            var boutique_place = " ";
                                                            var customIcon = "";
                                                            var boutique_id = boutique[i].id
                                                            var btnorder = 'btnorder'+boutique_id;
                                                            var btnprofil = 'btnprofil'+boutique_id;
                    
                                                            $scope[btnorder] = function (id) {
                                                                //console.log("data return : ", id)
                                                                $uibModal.open({
                                                                    templateUrl: "<%= asset_path('Templates/myModalOrder.html.erb') %>", // loads the template
                                                                    controller: "modalOrder",
                                                                    backdrop: true, // setting backdrop allows us to close the modal window on clicking outside the modal window
                                                                    size: 'lg',
                                                                    resolve: {
                                                                        boutique: function () {
                                                                            return id; // Appel au controlleur modalOrder avec en entrée le nom du commerce
                                                                        },
                                                                        user: function () {
                                                                            return user; 
                                                                        }
                                                                    }
                                                                });
                                                            };

                                                            $scope[btnprofil] = function (id) {
                                                                //console.log("data return : ", id)
                                                                $uibModal.open({
                                                                    templateUrl: "<%= asset_path('Templates/myModalProfil.html.erb') %>", // loads the template
                                                                    controller: "modalProfil",
                                                                    backdrop: true, // setting backdrop allows us to close the modal window on clicking outside the modal window
                                                                    size: 'lg',
                                                                    resolve: {
                                                                        boutique: function () {
                                                                            return id; // Appel au controlleur modalOrder avec en entrée le nom du commerce
                                                                        },
                                                                        user: function () {
                                                                            return user; 
                                                                        }
                                                                    }
                                                                });
                                                            };
                    
                                                            // Si le user est un acheteur
                                                            boutique_place = [boutique[i].latitude, boutique[i].longitude];
                    
                                                            // Customisation de l'Icon pour les commerces déjà presents en base
                                                            customIcon = L.icon({
                                                                iconUrl: 'https://upload.wikimedia.org/wikipedia/commons/7/74/Fruit_Stand_-_The_Noun_Project.svg',
                                                                iconSize: [35, 35], // size of the icon
                                                            });
                    
                                                            commentaire = "<div><B>Commerce adh&eacuterent</B>."+
                                                                          "<br /> Pour Commandez vos produits "+
                                                                          "<br /><button class='btn' ng-click='btnorder"+ boutique_id +"("+boutique_id+")'>Order</button> "+
                                                                          "<button class='btn' ng-click='btnprofil"+ boutique_id +"("+boutique_id+")'>Profil</button></div>";
                                                            // Compile title DOM into a link function
                                                            var linkFn = $compile(angular.element(commentaire));
                                                                    
                                                            // Return a jQuery DOM tree fully controlled by AngularJS so that ng directives will work
                                                            var popup = linkFn($scope);
                    
                                                            //console.log("coordonnées :", boutique_place )
                                                            if (boutique_place !== " ") {
                                                                var customPopup = L.popup()
                                                                    .setLatLng(boutique_place)
                                                                    .setContent(popup[0])
                                                                    .openOn(map);
                                                                //map.removeLayer(result);
                                                                L.marker(boutique_place, {icon: customIcon}).bindPopup(customPopup).addTo(map);
                                                            }
                                                        }
                                                    });
                                                }
                                            })
                                        })
    
                                    }, function (error) {
                                        // do something about the error
                                        console.log("Error getBoutiques : ", error);
                                        deferred.reject(error);
                                    });

                            //});
                                }
                            })
                        })
                    }
                }, function(error) {
                    // unauthenticated error
                    console.log("MainController error : ", error)
                    deferred.reject(error);
                });
            }
        });

    }]);

})();